# 워커 프로세스 개수 자동 설정 (CPU 코어 수만큼 사용)
worker_processes auto;

# 이벤트 설정 블록: 워커당 최대 연결 수 지정
events {
  worker_connections 1024;            # 각 워커가 동시에 처리할 수 있는 최대 연결 수
}

http {
  # ------------------------
  # 로그 포맷 정의
  # ------------------------
  # custom 로그 포맷: client 정보, 요청 정보, upstream 처리 정보 포함
  log_format custom '$remote_addr - $remote_user [$time_local] '
                    '"$request" $status $body_bytes_sent '
                    '"$http_referer" "$http_user_agent" '
                    'upstream_addr=$upstream_addr '     # 요청을 처리한 backend 컨테이너 IP:포트
                    'upstream_status=$upstream_status'; # backend 응답 상태 코드

  # access log를 custom 포맷으로 기록
  access_log /var/log/nginx/access.log custom;

  # ------------------------
  # DNS resolver 설정
  # ------------------------
  # 내부 DNS 서버 사용 (127.0.0.11)
  resolver 127.0.0.11 valid=10s;        # 10초마다 DNS TTL 갱신
  resolver_timeout 5s;                  # DNS 조회 최대 대기 시간

  # ------------------------
  # upstream 블록: backend 서버 그룹 정의
  # ------------------------
  upstream backend {
    zone backend 64k;                   # shared memory에 upstream 정보 저장
    server server:3000 resolve;         # 서비스 이름을 DNS로 실시간 해석
  }

  # ------------------------
  # server 블록: 실제 요청 처리
  # ------------------------
  server {
    listen 3000;                              # Nginx가 수신할 포트

    location / {
      proxy_pass http://backend;              # upstream backend로 요청 전달

      # ------------------------
      # WebSocket 업그레이드 관련 헤더
      # ------------------------
      proxy_http_version 1.1;                 # WebSocket은 HTTP/1.1 필요
      proxy_set_header Upgrade $http_upgrade; # HTTP->WebSocket 업그레이드
      proxy_set_header Connection "Upgrade";  # 업그레이드 요청 표시

      # ------------------------
      # 클라이언트 원본 호스트 전달
      # ------------------------
      proxy_set_header Host $host;            # 원래 요청의 호스트 헤더 유지
    }
  }
}
